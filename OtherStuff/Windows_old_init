local set=vim.opt --General Settings
local a=vim.wo --Window Scoped	
local b=vim.b --Bufferd Scoped
local g=vim.g --Global Variables

local n_keymap = function(lhs, rhs)
	    vim.api.nvim_set_keymap('n', lhs, rhs, { noremap = true, silent = true  })
end

local keymap = function(lhs, rhs)
	    vim.api.nvim_set_keymap('n', lhs, rhs, { noremap = false, silent = true  })
end

--Settings
--set.backspace={'*/indent/*','*/eol/*','*/start/*'}
set.swapfile=false
set.backup=false
set.nu=true
set.rnu=true
set.wrap=true
set.fen=true
set.fdm="indent"
set.laststatus=2
set.cmdheight=1
set.ts=4
set.sw=4
set.sts=0
set.ai=true
set.hlsearch=true
set.incsearch=true
set.showmatch=true
set.showcmd=true
set.splitright=true
set.mouse=a
set.termguicolors=true
set.wildmenu=true


vim.api.nvim_create_autocommand('filetype *lua',{command = 'nnoremap <F8> luafile %',})

-- autocmd filetype cpp nnoremap <F6> :w <CR> :!g++ -o %:r % -std=c++14 && ./%:r & gedit ~/Desktop/a/out.txt  && rm %:r<Enter>

-- autocmd BufNewFile *.cpp 0r ~/.config/temp.cpp

--Mappings 

n_keymap('<C-s>', ':w<CR>')
n_keymap('<C-q>', ':q!<CR>')
n_keymap('<C-w>', ':bd!<CR>')
n_keymap('<C-n>', ':tabnew<CR>')
n_keymap('<C-Up>', ':tabnext<CR>')
n_keymap('<C-Down>', ':tabprevious<CR>')
n_keymap('<C-Right>', ':bnext<CR>')
n_keymap('<C-Left>', ':bprevious<CR>')
n_keymap('<C-z>', ':undo<CR>')
n_keymap('<C-r>', ':redo<CR>')

-- Telescope Mappings

n_keymap('<leader>ff',':Telescope find_files<CR>')
n_keymap('<leader>fg',':Telescope live_grep<CR>')
n_keymap('<leader>fh',':Telescope help_tags<CR>')
n_keymap('<leader>fb',':Telescope buffers<CR>')
n_keymap('<leader>fe',':Telescope oldfiles<CR>')
n_keymap('<leader>fv',':Telescope vim_options<CR>')

-- Nvim Tree Settings

n_keymap('<leader>o', ':NvimTreeOpen')
n_keymap('<leader>c', ':NvimTreeClose')
n_keymap('<leader>u', ':NvimTreeFocus')
n_keymap('<leader>n', ':NvimTreeFindFiles')
n_keymap('<leader>r', ':NvimTreeRefresh')

-- Buffer Line Settings

n_keymap('<A-Up>', ':BufferLineCycleNext<CR>')
n_keymap('<A-Down>', ':BufferLineCyclePrevious<CR>')
n_keymap('<A-Right>', ':BufferLineMoveNext<CR>')
n_keymap('<A-Left>', ':BufferLineMovePrev<CR>')
n_keymap('<A-]>', ':BufferLineSortByExtension<CR>')
n_keymap('<A-[>', ':BufferLineSortByDirectory<CR>')

-- Tokyonight theme settings
vim.g.tokyonight_style = "night"
vim.g.tokyonight_italic_functions = true
vim.g.tokyonight_sidebars = { "qf", "vista_kind", "terminal", "packer"   }
vim.g.tokyonight_colors = { hint = "orange", error = "#ff0000"   }
vim.cmd[[colorscheme tokyonight]]


-- lualine settings

require('lualine').setup{
	options ={
		icons_enable=true,
		theme='onedarker',
		options = {
			section_separators = { left = '', right = ''  },
		  	component_separators = { left = '', right = ''  }
							
		},
		sections = {
			lualine_a = {'filename'},
			lualine_b = {'branch', 'diff', 'diagnostics'},
			lualine_c = {'mode'},
		  	lualine_x = {'encoding', 'fileformat', 'filetype'},
			lualine_y = {'progress'},
		   	lualine_z = {'location'}
		},
	}
}

-- Buffer Line and its settings

require("bufferline").setup{
	options ={
		mode="buffers",
		indicator_icon = '|',
		buffer_close_icon = 'X',
		modified_icon = '●',
		close_icon = "",
		buffer_close_icon = '',
		numbers = "buffer_id",
		left_trunc_marker = '',
	  	right_trunc_marker = '',
	   	max_name_length = 18,
	   	max_prefix_length = 15,
	   	tab_size = 18,
	   	separator_style = "thick",
		offsets ={{
		filetype="NvimTree",
		text="File Explorer",
		highlight="Directory",
		text_align="left"
		}}
	}
}

-- Telescope and its settings

local actions = require('telescope.actions')
require('telescope').setup {
	defaults = {
		layout_config = {
			width = 0.75,
			prompt_position = "top",
			preview_cutoff = 120,
			horizontal = {mirror = false},
			vertical = {mirror = false}								      
		},
		find_command = {
			 'rg', '--no-heading', '--with-filename', '--line-number', '--column', '--smart-case'	      
		},
		prompt_prefix = "",
    		selection_caret = "",
		--
    		entry_prefix = "",
		initial_mode = "insert",
    		selection_strategy = "reset",
    		sorting_strategy = "descending",
    		layout_strategy = "horizontal",
    		file_sorter = require'telescope.sorters'.get_fuzzy_file,
    		file_ignore_patterns = {},
    		generic_sorter = require'telescope.sorters'.get_generic_fuzzy_sorter,
    		path_display = {},
    		winblend = 0,
    		border = {},
    		borderchars = {'─', '│', '─', '│', '╭', '╮', '╯', '╰'},
    		color_devicons = true,
    		use_less = true,
    		set_env = {['COLORTERM'] = 'truecolor'}, -- default = nil,
    		file_previewer = require'telescope.previewers'.vim_buffer_cat.new,
   			grep_previewer = require'telescope.previewers'.vim_buffer_vimgrep.new,
    		qflist_previewer = require'telescope.previewers'.vim_buffer_qflist.new,
    		buffer_previewer_maker= require'telescope.previewers'.buffer_previewer_maker,
	mappings = {
      		i = {
        	["<C-j>"] = actions.move_selection_next,
        	["<C-k>"] = actions.move_selection_previous,
        	["<C-q>"] = actions.smart_send_to_qflist + actions.open_qflist,
        	["<esc>"] = actions.close,
        	["<CR>"] = actions.select_default + actions.center
      	},
      	n = {
        	["<C-j>"] = actions.move_selection_next,
       		["<C-k>"] = actions.move_selection_previous,
        	["<C-q>"] = actions.smart_send_to_qflist + actions.open_qflist
      }
    }
  }
}

-- Nvim Tree Settings

vim.g.nvim_tree_width = 10

require'nvim-tree'.setup {
  auto_reload_on_write = true,
  create_in_closed_folder = false,
  disable_netrw = false,
  hijack_cursor = false,
  hijack_netrw = true,
  hijack_unnamed_buffer_when_opening = false,
  ignore_buffer_on_setup = false,
  open_on_setup = false,
  open_on_setup_file = false,
  open_on_tab = false,
  sort_by = "name",
  update_cwd = false,
  reload_on_bufenter = false,
  respect_buf_cwd = false,
  view = {
    adaptive_size = false,
    width = 30,
    height = 30,
    hide_root_folder = false,
    side = "left",
    preserve_window_proportions = false,
    number = false,
    relativenumber = false,
    signcolumn = "yes",
    mappings = {
      custom_only = false,
      list = {
        -- user mappings go here
      },
    },
  },
  renderer = {
    add_trailing = false,
    group_empty = false,
    highlight_git = false,
    highlight_opened_files = "none",
    root_folder_modifier = ":~",
    indent_markers = {
      enable = false,
      icons = {
        corner = "└ ",
        edge = "│ ",
        item = "│ ",
        none = "  ",
      },
    },
    icons = {
      webdev_colors = true,
      git_placement = "before",
      padding = " ",
      symlink_arrow = " ➛ ",
      show = {
        file = true,
        folder = true,
        folder_arrow = true,
        git = true,
      },
      glyphs = {
        default = "",
        symlink = "",
        folder = {
          arrow_closed = "",
          arrow_open = "",
          default = "",
          open = "",
          empty = "",
          empty_open = "",
          symlink = "",
          symlink_open = "",
        },
        git = {
          unstaged = "✗",
          staged = "✓",
          unmerged = "",
          renamed = "➜",
          untracked = "★",
          deleted = "",
          ignored = "◌",
        },
      },
    },
    special_files = { "Cargo.toml", "Makefile", "README.md", "readme.md" },
  },
  hijack_directories = {
    enable = true,
    auto_open = true,
  },
  update_focused_file = {
    enable = false,
    update_cwd = false,
    ignore_list = {},
  },
  ignore_ft_on_setup = {},
  system_open = {
    cmd = "",
    args = {},
  },
  diagnostics = {
    enable = false,
    show_on_dirs = false,
    icons = {
      hint = "",
      info = "",
      warning = "",
      error = "",
    },
  },
  filters = {
    dotfiles = false,
    custom = {},
    exclude = {},
  },
  filesystem_watchers = {
    enable = false,
    interval = 100,
  },
  git = {
    enable = true,
    ignore = true,
    timeout = 400,
  },
  actions = {
    use_system_clipboard = true,
    change_dir = {
      enable = true,
      global = false,
      restrict_above_cwd = false,
    },
    expand_all = {
      max_folder_discovery = 300,
    },
    open_file = {
      quit_on_open = false,
      resize_window = true,
      window_picker = {
        enable = true,
        chars = "ABCDEFGHIJKLMNOPQRSTUVWXYZ1234567890",
        exclude = {
          filetype = { "notify", "packer", "qf", "diff", "fugitive", "fugitiveblame" },
          buftype = { "nofile", "terminal", "help" },
        },
      },
    },
    remove_file = {
      close_window = true,
    },
  },
  trash = {
    cmd = "trash",
    require_confirm = true,
  },
  live_filter = {
    prefix = "[FILTER]: ",
    always_show_folders = true,
  },
  log = {
    enable = false,
    truncate = false,
    types = {
      all = false,
      config = false,
      copy_paste = false,
      diagnostics = false,
      git = false,
      profile = false,
      watcher = false,
    },
  },
} 

-- comment settings
require('nvim_comment').setup({
	comment_empyt = false,
	create_mappings = true,
	line_mappings = "gcc",
})

require("toggleterm").setup{
	   function(term)
	    if term.direction == "horizontal" then
	         return 15
	    elseif term.direction == "vertical" then
		     return vim.o.columns * 0.4
	    end
	end,
		open_mapping = [[<c-\>]],
		hide_numbers = true, 
		shade_terminals = true,
		shading_factor = '1',
		start_in_insert = true,
		insert_mappings = true,
		terminal_mappings = true,
		persist_size = true,
		direction = 'float',
		close_on_exit = true,
		shell = vim.o.shell,
		float_opts = {
		     border = 'curved',
		     width = 100,
		     height = 75,
		     winblend = 3,
		}
}


--Lsp Settings
require("nvim-lsp-installer").setup({
	ui = {
		icons = {
            server_installed = "✓",
            server_pending = "➜",
            server_uninstalled = "✗"
		}
	}
})

-- CMP

vim.g.completeopt="menu,menuone,noselect,noinsert"
  local cmp = require'cmp'
    local lspkind = require('lspkind')
	cmp.setup({
		snippet = {
			      expand = function(args)
				  vim.fn["vsnip#anonymous"](args.body)
		 end,							    
		},
		window = {
			      completion = cmp.config.window.bordered(),
			      documentation = cmp.config.window.bordered(),			    
		},
		mapping = cmp.mapping.preset.insert({
      ['<C-b>'] = cmp.mapping.scroll_docs(-4),
      ['<C-f>'] = cmp.mapping.scroll_docs(4),
      ['<C-Space>'] = cmp.mapping.complete(),
      ['<C-e>'] = cmp.mapping.abort(),
      ['<CR>'] = cmp.mapping.confirm({ select = true  }),
  }),
		sources = cmp.config.sources(
		{
	      { name = 'nvim_lsp'  },
	        { name = 'vsnip'  },						      
		},
		{
			{ name = 'buffer'  },	      
		}
		)
		  
	})
	cmp.setup.filetype('gitcommit', {
		sources = cmp.config.sources({
	    { name = 'cmp_git'  }, 	
	},
	{
		{ name = 'buffer'  },				    
	})		    
	})
	cmp.setup.cmdline('/', {
		    mapping = cmp.mapping.preset.cmdline(),
			sources = {
				      { name = 'buffer'  }				      
			},
			formatting = {
				format = lspkind.cmp_format({
			      mode = 'symbol',
			        maxwidth = 50, 							   
				})	  			
			}
		})

	cmp.setup.cmdline(':', {
	    mapping = cmp.mapping.preset.cmdline(),
		sources = cmp.config.sources({
      { name = 'path'  }
		      
	  },
	  {
      	{ name = 'cmdline'  }					    
	})})

	  local capabilities = require('cmp_nvim_lsp').update_capabilities(vim.lsp.protocol.make_client_capabilities())
	  require('lspconfig').clangd.setup {
		      capabilities = capabilities
	  }


-- dashboard

return require('packer').startup(function()
	use { 'wbthomason/packer.nvim' }
	use { 'sickill/vim-monokai' }
	use { 'morhetz/gruvbox' }
	use { 'folke/tokyonight.nvim' }
	use { 'jiangmiao/auto-pairs' }
	use { 'kyazdani42/nvim-web-devicons' }
	use { 'akinsho/bufferline.nvim', tag = "v2.*" }
	use { 'nvim-lualine/lualine.nvim' }
	use { 'kyazdani42/nvim-tree.lua' }	
	use { 'LunarVim/onedarker.nvim' }
	use { 'nvim-lua/plenary.nvim' }
	use { 'nvim-telescope/telescope.nvim' }
	use { 'kyazdani42/nvim-tree.lua' }
	use { 'nvim-treesitter/nvim-treesitter', run = 'TsUpdate' }
	use { 'akinsho/toggleterm.nvim' }
	use { 'terrortylor/nvim-comment' }
	use { 'rcarriga/nvim-notify' }
	use {
		"williamboman/nvim-lsp-installer",
		{
			"neovim/nvim-lspconfig",
	 		config = function()
			require("nvim-lsp-installer").setup {}
			local lspconfig = require("lspconfig")
			lspconfig.sumneko_lua.setup {}
			lspconfig.pyright.setup{}
			lspconfig.clangd.setup{}
			end	
		}			
	}
	use { 'hrsh7th/cmp-nvim-lsp' }
	use { 'hrsh7th/cmp-buffer' }
	use { 'hrsh7th/cmp-path' }
	use { 'hrsh7th/cmp-cmdline' }
	use { 'hrsh7th/nvim-cmp' }
	use { 'hrsh7th/cmp-vsnip' }
	use { 'hrsh7th/vim-vsnip' }
	use { 'onsails/lspkind.nvim' }
end)
